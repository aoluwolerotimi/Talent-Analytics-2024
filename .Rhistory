#   )
#
# examiner_names_gender
# remove extra colums from the gender table
# examiner_names_gender <- examiner_names_gender %>%
#   select(examiner_name_first, gender)
#
# View(examiner_names_gender)
# joining gender back to the dataset
# applications <- applications %>%
#   left_join(examiner_names_gender, by = "examiner_name_first")
# cleaning up
# rm(examiner_names)
# rm(examiner_names_gender)
# gc()
## INDIVIDUAL LEVEL VARIABLES: RACE ##
library(wru)
# examiner_surnames <- applications %>%
#   select(surname = examiner_name_last) %>%
#   distinct()
#
# examiner_surnames
#
# examiner_race <- predict_race(voter.file = examiner_surnames, surname.only = T) %>%
#   as_tibble()
# examiner_race
#
# examiner_race <- examiner_race %>%
#   mutate(max_race_p = pmax(pred.asi, pred.bla, pred.his, pred.oth, pred.whi)) %>%
#   mutate(race = case_when(
#     max_race_p == pred.asi ~ "Asian",
#     max_race_p == pred.bla ~ "black",
#     max_race_p == pred.his ~ "Hispanic",
#     max_race_p == pred.oth ~ "other",
#     max_race_p == pred.whi ~ "white",
#     TRUE ~ NA_character_
#   ))
#
# examiner_race
#
# examiner_race <- examiner_race %>%
#   select(surname,race)
# applications <- applications %>%
#   left_join(examiner_race, by = c("examiner_name_last" = "surname"))
#
# rm(examiner_race)
# rm(examiner_surnames)
# gc()
## INDIVIDUAL LEVEL VARIABLES: TENURE ##
# examiner_dates <- applications %>%
#   select(examiner_id, filing_date, appl_status_date)
#
# examiner_dates
#
# examiner_dates <- examiner_dates %>%
#   mutate(start_date = ymd(filing_date), end_date = as_date(dmy_hms(appl_status_date)))
#
#
# examiner_dates <- examiner_dates %>%
#   group_by(examiner_id) %>%
#   summarise(
#     earliest_date = min(start_date, na.rm = TRUE),
#     latest_date = max(end_date, na.rm = TRUE),
#     tenure_days = interval(earliest_date, latest_date) %/% days(1)
#   ) %>%
#   filter(year(latest_date)<2018)
#
# examiner_dates
#
# applications <- applications %>%
#   left_join(examiner_dates, by = "examiner_id")
#
# rm(examiner_dates)
# gc()
# SAVING RESULTS FOR FUTURE ACCESS
# write_feather(applications, paste0(data_path,"app_data_starter_coded.feather"))
### CREATING PANEL DATASETS ###
applications_coded <- read_feather(paste0(data_path,"app_data_starter_coded.feather"))
View(applications_coded)
colnames(applications_coded)
library(dplyr)
library(zoo)
# ATTEMPT 1 - NOT WORKING
applications_coded$earliest_quarter <- paste0(year(ymd(applications_coded$earliest_date.x)), "-", quarter(ymd(applications_coded$earliest_date.x)))
applications_coded$latest_quarter <- paste0(year(ymd(applications_coded$latest_date.x)), "-", quarter(ymd(applications_coded$latest_date.x)))
sapply(applications_coded, class)
knitr::opts_chunk$set(echo = TRUE)
library(arrow)
library(tidyverse)
library(gender)
library(remotes)
library(wru)
library(dplyr)
library(zoo)
library(lubridate)
knitr::opts_chunk$set(echo = TRUE)
library(arrow)
library(tidyverse)
library(dplyr)
library(lubridate)
data_path <- "/Users/aoluwolerotimi/Datasets/"
applications_coded <- read_feather(paste0(data_path,"app_data_starter_coded.feather"))
View(applications_coded)
sapply(applications_coded, class)
data_path <- "/Users/aoluwolerotimi/Datasets/"
applications <- read_feather(paste0(data_path,"app_data_starter_coded.feather"))
View(applications_coded)
knitr::opts_chunk$set(echo = TRUE)
library(arrow)
library(tidyverse)
library(dplyr)
library(lubridate)
data_path <- "/Users/aoluwolerotimi/Datasets/"
applications <- read_feather(paste0(data_path,"app_data_starter_coded.feather"))
View(applications)
# sapply(applications_coded, class)
# Creating quarter variable
applications$quarter <- paste0(year(applications$filing_date), "/", quarter(applications$filing_date))
sapply(applications_coded, class)
sapply(applications, class)
# Creating quarter variable
# applications$quarter <- paste0(year(applications$filing_date), "/", quarter(applications$filing_date))
# Aggregate applications by quarter and examiner
applications <- applications %>%
group_by(quarter, examiner_id) %>%
mutate(new_applications = n_distinct(application_number)) %>%
ungroup()
# Creating quarter variable
# applications$quarter <- paste0(year(applications$filing_date), "/", quarter(applications$filing_date))
# Aggregate applications by quarter and examiner to generate counts per examiner per quarter
# applications <- applications %>%
#   group_by(quarter, examiner_id) %>%
#   mutate(new_applications = n_distinct(application_number)) %>%
#   ungroup()
applications <- applications %>%
group_by(quarter, examiner_id) %>%
mutate(iss_applications = sum(disposal_type == "ISS" & !duplicated(application_number)))
applications <- applications %>%
group_by(quarter, examiner_id) %>%
mutate(abn_applications = sum(disposal_type == "ABN" & !duplicated(application_number)))
applications <- applications %>%
group_by(quarter, examiner_id) %>%
mutate(pen_applications = sum(disposal_type == "PEND" & !duplicated(application_number)))
# Creating quarter variable
# applications$quarter <- paste0(year(applications$filing_date), "/", quarter(applications$filing_date))
# Aggregate applications by quarter and examiner to generate counts per examiner per quarter
# applications <- applications %>%
#   group_by(quarter, examiner_id) %>%
#   mutate(new_applications = n_distinct(application_number)) %>%
#   ungroup()
# applications <- applications %>%
#   group_by(quarter, examiner_id) %>%
#   mutate(iss_applications = sum(disposal_type == "ISS" & !duplicated(application_number)))
#
# applications <- applications %>%
#   group_by(quarter, examiner_id) %>%
#   mutate(abn_applications = sum(disposal_type == "ABN" & !duplicated(application_number)))
#
# applications <- applications %>%
#   group_by(quarter, examiner_id) %>%
#   mutate(pen_applications = sum(disposal_type == "PEND" & !duplicated(application_number)))
applications <- applications %>% ungroup()
applications <- applications %>%
group_by(quarter,examiner_art_unit) %>%
mutate(examiner_art_unit_num =  n_distinct(examiner_id))%>%
ungroup()
# Creating quarter variable
# applications$quarter <- paste0(year(applications$filing_date), "/", quarter(applications$filing_date))
# Aggregate applications by quarter and examiner to generate counts per examiner per quarter
# applications <- applications %>%
#   group_by(quarter, examiner_id) %>%
#   mutate(new_applications = n_distinct(application_number)) %>%
#   ungroup()
# applications <- applications %>%
#   group_by(quarter, examiner_id) %>%
#   mutate(iss_applications = sum(disposal_type == "ISS" & !duplicated(application_number)))
#
# applications <- applications %>%
#   group_by(quarter, examiner_id) %>%
#   mutate(abn_applications = sum(disposal_type == "ABN" & !duplicated(application_number)))
#
# applications <- applications %>%
#   group_by(quarter, examiner_id) %>%
#   mutate(pen_applications = sum(disposal_type == "PEND" & !duplicated(application_number)))
# applications <- applications %>% ungroup()
#
# applications <- applications %>%
#   group_by(quarter,examiner_art_unit) %>%
#   mutate(examiner_art_unit_num =  n_distinct(examiner_id))%>%
#   ungroup()
applications <- applications %>%
rename(art_unit_hc = examiner_art_unit_num)
# Creating quarter variable
# applications$quarter <- paste0(year(applications$filing_date), "/", quarter(applications$filing_date))
# Aggregate applications by quarter and examiner to generate counts per examiner per quarter
# applications <- applications %>%
#   group_by(quarter, examiner_id) %>%
#   mutate(new_applications = n_distinct(application_number)) %>%
#   ungroup()
# applications <- applications %>%
#   group_by(quarter, examiner_id) %>%
#   mutate(iss_applications = sum(disposal_type == "ISS" & !duplicated(application_number)))
#
# applications <- applications %>%
#   group_by(quarter, examiner_id) %>%
#   mutate(abn_applications = sum(disposal_type == "ABN" & !duplicated(application_number)))
#
# applications <- applications %>%
#   group_by(quarter, examiner_id) %>%
#   mutate(pen_applications = sum(disposal_type == "PEND" & !duplicated(application_number)))
# applications <- applications %>% ungroup()
#
# applications <- applications %>%
#   group_by(quarter,examiner_art_unit) %>%
#   mutate(examiner_art_unit_num =  n_distinct(examiner_id))%>%
#   ungroup()
# applications <- applications %>%
#   rename(art_unit_hc = examiner_art_unit_num)
# Print the unique values
print(unique(applications$race.y))
# Creating quarter variable
# applications$quarter <- paste0(year(applications$filing_date), "/", quarter(applications$filing_date))
# Aggregate applications by quarter and examiner to generate counts per examiner per quarter
# applications <- applications %>%
#   group_by(quarter, examiner_id) %>%
#   mutate(new_applications = n_distinct(application_number)) %>%
#   ungroup()
# applications <- applications %>%
#   group_by(quarter, examiner_id) %>%
#   mutate(iss_applications = sum(disposal_type == "ISS" & !duplicated(application_number)))
#
# applications <- applications %>%
#   group_by(quarter, examiner_id) %>%
#   mutate(abn_applications = sum(disposal_type == "ABN" & !duplicated(application_number)))
#
# applications <- applications %>%
#   group_by(quarter, examiner_id) %>%
#   mutate(pen_applications = sum(disposal_type == "PEND" & !duplicated(application_number)))
# applications <- applications %>% ungroup()
#
# applications <- applications %>%
#   group_by(quarter,examiner_art_unit) %>%
#   mutate(examiner_art_unit_num =  n_distinct(examiner_id))%>%
#   ungroup()
# applications <- applications %>%
#   rename(art_unit_hc = examiner_art_unit_num)
applications <- applications %>%
group_by(quarter, examiner_art_unit) %>%
mutate(women_in_art_unit  = sum(gender.y == "female" & !duplicated(examiner_id)))
applications <- applications %>%
group_by(quarter, examiner_art_unit) %>%
mutate(Asian_in_art_unit  = sum(race.y == "Asian" & !duplicated(examiner_id)))
applications <- applications %>%
group_by(quarter, examiner_art_unit) %>%
mutate(Black_in_art_unit  = sum(race.y == "black" & !duplicated(examiner_id)))
applications <- applications %>%
group_by(quarter, examiner_art_unit) %>%
mutate(Hispanic_in_art_unit  = sum(race.y == "Hispanic" & !duplicated(examiner_id)))
applications <- applications %>%
group_by(quarter, examiner_art_unit) %>%
mutate(Other_in_art_unit  = sum(race.y == "other" & !duplicated(examiner_id)))
applications <- applications %>%
group_by(quarter, examiner_art_unit) %>%
mutate(White_in_art_unit  = sum(race.y == "white" & !duplicated(examiner_id)))
ungroup()
sapply(applications, class)
# Creating seperation and au indicator
# sort by examiner_id and quarter
applications <- applications %>%
arrange(examiner_id, quarter)
# Creating seperation and au indicator
# sort by examiner_id and quarter
# applications <- applications %>%
#   arrange(examiner_id, quarter)
applications <- applications %>%
ungroup() %>%
arrange(examiner_id, quarter)
# Creating seperation and au indicator
# sort by examiner_id and quarter
# applications <- applications %>%
#   ungroup() %>%
#   arrange(examiner_id, quarter)
write_feather(applications, paste0(data_path,"app_data_coded_plus.feather"))
# applications_selected <- applications %>%
#   select(
#     application_number,
#     examiner_id,
#     examiner_name_first,
#     examiner_name_middle,
#     examiner_name_last,
#     tc,
#     quarter,
#     new_applications,
#     ISSUED_applications,
#     abn_applications,
#     PEN_applications,
#     examiner_art_unit,
#     women_in_art_unit,
#     Asian_in_art_unit,
#     Black_in_art_unit,
#     Other_in_art_unit,
#     White_in_art_unit,
#     ends_with(".x")  # Select columns that end with '_x'
#   ) %>%
#   rename_with(~ str_remove(., ".x"), ends_with(".x"))  # Remove the '_x' suffix
# Creating seperation and au indicator
# sort by examiner_id and quarter
# applications <- applications %>%
#   ungroup() %>%
#   arrange(examiner_id, quarter)
# write_feather(applications, paste0(data_path,"app_data_coded_plus.feather")) # just in case i need to come back to this stage
applications_selected <- applications %>%
select(
examiner_id,
quarter,
examiner_name_first,
examiner_name_middle,
examiner_name_last,
tc,
new_applications,
iss_applications,
abn_applications,
pen_applications,
examiner_art_unit,
art_unit_hc,
women_in_art_unit,
Asian_in_art_unit,
Black_in_art_unit,
Other_in_art_unit,
White_in_art_unit,
ends_with(".x")  # Select columns that end with '_x'
) %>%
rename_with(~ str_remove(., ".x"), ends_with(".x"))  # Remove the '_x' suffix
# Subsetting data to only include the columns we need
# sort by examiner_id and quarter
# applications <- applications %>%
#   ungroup() %>%
#   arrange(examiner_id, quarter)
# write_feather(applications, paste0(data_path,"app_data_coded_plus.feather")) # just in case i need to come back to this stage
# applications_selected <- applications %>%
#   select(
#     examiner_id,
#     quarter,
#     examiner_name_first,
#     examiner_name_middle,
#     examiner_name_last,
#     tc,
#     new_applications,
#     iss_applications,
#     abn_applications,
#     pen_applications,
#     examiner_art_unit,
#     art_unit_hc,
#     women_in_art_unit,
#     Asian_in_art_unit,
#     Black_in_art_unit,
#     Other_in_art_unit,
#     White_in_art_unit,
#     ends_with(".x")  # Select columns that end with '_x'
#   ) %>%
#   rename_with(~ str_remove(., ".x"), ends_with(".x"))  # Remove the '_x' suffix
View(applications_selected)
# Subsetting data to only include the columns we need
# sort by examiner_id and quarter
# applications <- applications %>%
#   ungroup() %>%
#   arrange(examiner_id, quarter)
# write_feather(applications, paste0(data_path,"app_data_coded_plus.feather")) # just in case i need to come back to this stage
# applications_selected <- applications %>%
#   select(
#     examiner_id,
#     quarter,
#     examiner_name_first,
#     examiner_name_middle,
#     examiner_name_last,
#     tc,
#     new_applications,
#     iss_applications,
#     abn_applications,
#     pen_applications,
#     examiner_art_unit,
#     art_unit_hc,
#     women_in_art_unit,
#     Asian_in_art_unit,
#     Black_in_art_unit,
#     Other_in_art_unit,
#     White_in_art_unit,
#     ends_with(".x")  # Select columns that end with '_x'
#   ) %>%
#   rename_with(~ str_remove(., ".x"), ends_with(".x"))  # Remove the '_x' suffix
# View(applications_selected)
applications_selected <- applications_selected %>%
select(-examiner_name_middle)
# SEPARATION INDICATOR
# need to find each examiner's max quarter
applications_selected %>%
group_by(examiner_id) %>%
mutate(max_quarter = max(quarter))
# SEPARATION INDICATOR
# need to find each examiner's max quarter
# applications_selected %>%
#   group_by(examiner_id) %>%
#   mutate(max_quarter = max(quarter))
# and need to find overall max quarter in the dataset
applications_selected %>%
group_by(quarter) %>%
summarise(n = n_distinct(examiner_id)) %>%
arrange(desc(quarter)) %>% head(5)
# SEPARATION INDICATOR
# need to find each examiner's max quarter
# applications_selected %>%
#   group_by(examiner_id) %>%
#   mutate(max_quarter = max(quarter))
# and need to find overall max quarter in the dataset
# applications_selected %>%
#   group_by(quarter) %>%
#   summarise(n = n_distinct(examiner_id)) %>%
#   arrange(desc(quarter)) %>% head(5)
# 2017/2 is the max quarter in the dataset. but only 68 left over there so using 2017/1 instead
# could have been a data collection issue bc that's a huge drop
overall_max_quarter <- "2017/1"
# Create the separation_indicator
applications_selected <- applications_selected %>%
group_by(examiner_id) %>%
mutate(max_quarter_examiner = max(quarter)) %>%
ungroup() %>%
mutate(separation_indicator = if_else(max_quarter_examiner < overall_max_quarter, 1, 0))
applications_selected
# SEPARATION INDICATOR
# need to find each examiner's max quarter
# applications_selected %>%
#   group_by(examiner_id) %>%
#   mutate(max_quarter = max(quarter))
# and need to find overall max quarter in the dataset
# applications_selected %>%
#   group_by(quarter) %>%
#   summarise(n = n_distinct(examiner_id)) %>%
#   arrange(desc(quarter)) %>% head(5)
# 2017/2 is the max quarter in the dataset. but only 68 left over there so using 2017/1 instead
# could have been a data collection issue bc that's a huge drop
overall_max_quarter <- "2017/1"
# # Create the separation_indicator
# applications_selected <- applications_selected %>%
#   group_by(examiner_id) %>%
#   mutate(max_quarter_examiner = max(quarter)) %>%
#   ungroup() %>%
#   mutate(separation_indicator = if_else(max_quarter_examiner < overall_max_quarter, 1, 0))
applications_selected <- applications_selected %>%
select(-separation_indicator)
# SEPARATION INDICATOR
# need to find each examiner's max quarter
# applications_selected %>%
#   group_by(examiner_id) %>%
#   mutate(max_quarter = max(quarter))
# and need to find overall max quarter in the dataset
# applications_selected %>%
#   group_by(quarter) %>%
#   summarise(n = n_distinct(examiner_id)) %>%
#   arrange(desc(quarter)) %>% head(5)
# 2017/2 is the max quarter in the dataset. but only 68 left over there so using 2017/1 instead
# could have been a data collection issue bc that's a huge drop
# overall_max_quarter <- "2017/1"
applications_selected <- applications_selected %>%
group_by(examiner_id) %>%
mutate(max_quarter = max(quarter, na.rm = TRUE)) %>%
ungroup() %>%
mutate(separation_indicator = case_when(
quarter < max_quarter ~ 0,
quarter == max_quarter & quarter < overall_max_quarter ~ 1,
TRUE ~ 0
))
# SEPARATION INDICATOR
# need to find each examiner's max quarter
# applications_selected %>%
#   group_by(examiner_id) %>%
#   mutate(max_quarter = max(quarter))
# and need to find overall max quarter in the dataset
# applications_selected %>%
#   group_by(quarter) %>%
#   summarise(n = n_distinct(examiner_id)) %>%
#   arrange(desc(quarter)) %>% head(5)
# 2017/2 is the max quarter in the dataset. but only 68 left over there so using 2017/1 instead
# could have been a data collection issue bc that's a huge drop
# overall_max_quarter <- "2017/1"
# applications_selected <- applications_selected %>%
#   group_by(examiner_id) %>%
#   mutate(max_quarter = max(quarter, na.rm = TRUE)) %>%
#   ungroup() %>%
#   mutate(separation_indicator = case_when(
#     quarter < max_quarter ~ 0,
#     quarter == max_quarter & quarter < overall_max_quarter ~ 1,
#     TRUE ~ 0
#   ))
print(unique(applications_selected$separation_indicator))
applications_selected <- applications_selected %>%
group_by(examiner_id) %>%
arrange(examiner_id, quarter) %>%
mutate(au_move = if_else(examiner_art_unit != lag(examiner_art_unit, default = first(examiner_art_unit)), 1, 0)) %>%
ungroup()
applications_selected %>%
summarise_all(~ sum(is.na(.)))
applications %>%
summarise_all(~ sum(is.na(.)))
# applications_selected %>%
#   summarise_all(~ sum(is.na(.)))
# a bunch of examiner IDs are N/A but the quarter and first and last name are not so that is WEIRD
write_feather(applications_selected, paste0(data_path,"app_data_w_indicators.feather"))
# applications_selected %>%
#   summarise_all(~ sum(is.na(.)))
# a bunch of examiner IDs are N/A but the quarter and first and last name are not so that is WEIRD
# write_feather(applications_selected, paste0(data_path,"app_data_w_indicators.feather"))
glimpse(applications_selected)
